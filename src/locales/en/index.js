export default {
    common: {
        accessDenied: "Access Denied",
        attention: "Attention",
        welcome: "Welcome",
        loginWelcome: "Welcome to smart.enu system.",
        chooseCert: "Choose the certificate",
        activeList: "Active list",
        approvalList: "Approval sheet",
        newPasswordError: "Passwords are not identical or character count is less than 5 symbol",
        changePassword: "Change password",
        head: "Head of organization",
        headIin: "Head IIN",
        headFio: "Head full name",
        home: "Home page",
        returnLink: "Back to previous page",
        newPassword: "Enter new password",
        newPasswordRe: "Repeat new password",
        createDocument: "Generate document",
        createReport: "Generate report",
        councilName: "Council name",
        contragents: "Contragents",
        documents: "Documents",
        certificates: "Certificates",
        administration: "Administration",
        academicDegree: "Academic degree",
        academicTitle: "Academic title",
        annotation: "Annotation",
        approve: "Approve",
        approveDate: "Approve date",
        approvedBy: "Approved by",
        notUpload: "Document not uploaded",
        nextIssue: "The certificate sequence begins with this number",
        goToTheCourse: "Go to the course",
        addCertificate: "Certificate required",
        updateGES: "Update the list of GES",
        downloadCertificate: "Download The Certificate",
        selectAll: "Select All",
        action: {
            submit: "Submit",
            accept: "Accept",
            notAccept: "Deny",
            sendToApprove: "Send to Approve",
            approve: "Approve",
            publish: "Publish",
            reApprove: "Reapprove",
        },
        cabinet: "Personal account",
        lt: "Less than",
        letterSpacing: {
            expanded: "Expanded",
            condensed: "Condensed",
            normal: "Normal",
        },
        gt: "Greater than",
        equals: "Equals",
        login: "login",
        mgovMobile: "Sign in eGov mobile as an individual",
        mgovBusiness: "Sign in eGov Business as a legal entity",
        logout: "Logout",
        enter: "Type in",
        enterLogin: "Enter IIN or platonus mail",
        enterPassword: "Enter password",
        export: "Export",
        error: "Error",
        add: "Add",
        edit: "edit",
        print: "Print",
        orgname: "L.N. Gumilyov Eurasian National University",
        organizationName: "Organization name",
        date: "Date",
        delete: "delete",
        department: "department",
        structuralUnit: "Structural unit",
        diplomNumber: "Diplom number",
        docFormat: "in doc format",
        downloadPassword: "Download password",
        voteKeyword: "Password to check voice",
        pdfFormat: "in pdf format",
        close: "close",
        name: "Name",
        createNew: "Create",
        created: "Created",
        filterReset: "Reset filter",
        createdBy: "Author",
        checkMyVoice: "Check my voice",
        yourVoice: "Your vote: ",
        graduate: "Graduate",
        faculty: "Faculty",
        cafedra: "Academic department",
        choose: "Choose",
        graduationyear: "Start of study",
        admissionyear: "Finish of study",
        fullName: "Full name",
        forStudentsAndGraduates: "For students and graduates",
        hei: "HEI",
        updated: "Updated",
        type: "Type",
        reason: "Reason",
        registeredDate: "Registered date",
        state: "State",
        status: "Status",
        show: "Show",
        save: "Save",
        speciality: "Speciality",
        download: "Download",
        doclang: "Document language",
        lang: "Language",
        learnlang: "Teaching language",
        loading: "loadind",
        toapprove: "To approval",
        tosign: "For signature",
        comment: "Comment",
        contacts: "Contacts",
        filter: "Filter",
        yes: "Yes",
        no: "No",
        select: "Select",
        cancel: "Cancel",
        code: "Code",
        main: "Main",
        more: "More",
        loadMore: "Load more",
        meetingUrl: "Link to online meeting",
        meetingPlace: "Meeting place",
        myData: "My details",
        myResume: "My resume",
        move: "Move",
        theResume: "Resume",
        myVacancy: "My vacancies",
        nameIn: "Name",
        nameInQazaq: "Name in qazaq",
        nameInRussian: "Name in russian",
        nameInEnglish: "Name in english",
        noComment: "No comment",
        noData: "No data",
        null: "unknown",
        number: "Number",
        other: "Other",
        order: "Order",
        reserve: "Reserve",
        confirm: "Confirmation",
        confirmation: "Are you sure you want to proceed?",
        contentInQazaq: "Content in qazaq",
        contentInRussian: "Content in russian",
        contentInEnglish: "Content in english",
        userGroup: "User group",
        selectGroup: "Choose group",
        catalog: "Catalog",
        doc: "Document",
        newCatalog: "New catalog",
        newDoc: "New document",
        description: "Description",
        descriptionKz: "Description in qazaq",
        descriptionRu: "Description in russian",
        descriptionEn: "Description  in english",
        records: "Records",
        recordsLoading: "Loading ...",
        recordsNotFound: "Records not found",
        refinf: "Reference information",
        organization: "Organization",
        organizations: "Organizatios",
        params: "Parameters",
        password: "Password",
        person: "Person",
        individualEntrepreneur: "Persons",
        personal: "Staff",
        protocol: "Protocol",
        requiredField: "Required field",
        revision: "To revision",
        teacher: "Academic personnel",
        student: "Student",
        students: "Students",
        registration: "Registration",
        total: "Total",
        all: "All",
    register: "Check in",
        registered: "Rgistered",
        vote: "Vote",
        revote: "Revote",
        voted: "Voted",
        voting: "Voting",
        search: "Search",
        showingRecordsCount: "Showing {first} to {last} of {totalRecords} entries",
        showingRecordsCountShort: "{first} to {last} of {totalRecords}",
        votedFor: "Voted for: {result}",
        doYouWantDelete: "Are you sure to delete this item?",
        pending: "Pending",
        uploaded: "Uploaded",
        startDate: "Start date",
        endDate: "End date",
        send: "Send",
        sendToResponsible: "Send to responsible",
        publish: "Publish",
        reject: "Reject",
        online: "Online",
        offline: "Offline",
        userDetail: "User details",
        role: "Role",
        workPlace: "Work place",
        publishDate: "Date and time of publication:",
        pDate: "Date of publication",
        deadlineDate: "Deadline for submission of documents",
        organizationNameLabel: "Name of company",
        departmentNameLabel: "The name of the structural unit",
        headLabel: "Head:",
        author: "Author",
        personalInfo: 'Personal information',
        myAddress: 'Address',
        creationAndEditing: 'Creation and editing',
        states: {
            submitted: "Submitted",
            approved: "Approved",
            created: "created",
            inapproval: "in approval",
            rejected: "Rejected",
            revision: "for revision",
            registered: "Registered",
            notRegistered: "Not registered",
            notVoted: "Not voted",
            voted: "Voted",
            signing: "Signing",
            signed: "Signed",
            edited: "Edited",
            deleted: "Deleted",
            replied: "Replied",
            pending: "Pending",
        },

        message: {
            title: {
                downloadError: "Download error",
                uploadError: "Upload error",
                saveError: "Save error",
                docCreation: "Adding a new catalog",
                selectreportlanguage: "You have not select a language",
                selectreportyear: "You have not select a year",
                yearlessthancurrentyear: "The value of the year you select must be less than or equal to the current year",
                selectreportquarter: "You have not select a quarter",
                pleaseselectdateranges: "You have not select a date ranges",
                reportalreadyexists: "The report already exists",
                filternotfound: "Filter not found"
            },
            invalidkey: "Wrong password entered",
            notPermissionForApprove: "The selected user does not have the appropriate privileges to reconcile the document",
            fillError: "Not all the data listed. Please fill in all fields!",
            sendToApprovalError: "An error occurred while sending for approval. Check the correctness of the specified data!",
            downloadError: "Error during download",
            uploadError: "Error during upload",
            saveError: "Error during save",
            revisionError: "Error while submitting for revision",
            serverError: "Server error",
            groupsNotSelected: "No groups selected",
            catCreateError: "Error while creating a new catalog",
            catalogNotFilled: "Catalog is not specified",
            codeNotFilled: "Catalog code not specified",
            qazNameNotfilled: "Did not type the name in qazaq",
            rusNameNotfilled: "Did not type the name in russian",
            engNameNotfilled: "Did not type the name in english",
            catSuccesCreated: "New catalog added successfully",
            recordNotFound: "No matching entries found",
            succesSendToApproval: "Succes sent to approval",
            successApproved: "Success approved",
            succesRegistered: "Registered succesfully",
            succesSaved: "Saved successfully",
            successCompleted: "Successfully completed",
            selectRole: "Plewse, select a role",
            userSuccessInserted: "The user has been successfully created, download the authorization data to send to the user.",
            selectVariant: "Choose the option you need",
            selectUsers: "Please, select users",
            userIINExists: "User with same IIN already exists",
            incorrectIIN: "IIN is incorrect",
            orgBINExists: "Organization with same BIN already exists",
            accessDenied: "You do not have permission to view this document!",
            accessDeniedAdmin: "You do not have the necesary permisions. Please contact admins",
            saveChanges: "Save changes",
            impossible: "impossible",
            notAllowed: "You do not have permission to do this",
            CantModifyInCurrentState: "You can't modify document in current state",
            fileError: "Failed to upload file. Maybe the file is corrupted",
            mailSendError: "Error sending email",
            ConsulAlwaysHasSameMember: "The named person is already a member of another council",
            saveChangesWarning: "Would you like to save your changes?",
            unsaveOutcome: "If changes are not saved, they will be lost.",
            addPicture: "Add image",
            saveErrorToUpdate: "Error during save. Please refresh the page!",
            actionError: "An error occurred during this action",
            actionErrorContactAdmin: "Please contact the administrators to resolve this issue",
        },
        language: {
            kz: "in kazakh",
            ru: "in russian",
            en: "in english",
            ln1: "in kazakh",
            ln2: "in russian",
            ln3: "in english"
        },
        result: "Result",
        complete: "Complete",
        perform: "To perform",
        done: "Done",
        notDone: "Not done",
        success: "Success",
        successDone: "Successfully completed",
        downloadSignaturesPdf: "Download signatures",
        downloadCms: "Download CMS signature",
        signatures: "Signatures",
        unit: "Unit",
        planNumber: "Plan",
        suppDocs: "Supporting documents",
        additionalInfo: "Additional Information",
        resultSentToCorrect: "Result sent for revision",
        toCorrect: "To check",
        clear: "Clear",
        clearApprovalList: "Change the approval stages",
        properties: "Properties",
        history: "History",
        user: "User",
        fact: "Fact",
        actionTitle: "Action",
        style: "Style",
        bgColor: "Background color",
        textColor: "Text color",
        link: "Link",
        image: 'Image',
        signers: "Signatory parties",
        approvals: "Approving persons",
        goOver: 'Go over',
        linkType: 'Link type',
        linkTypeDownload: 'Download',
        linkTypeView: 'View',
        openLinkIn: 'Open link in...',
        currentWindowLink: 'Current window',
        newWindowLink: 'New window',
        dialogWindowsPdf: 'In dialog box (for PDF)',
        pdfTypeError: 'File type does not match PDF',
        eventType: 'Event type',
        gallery: 'Gallery',
        faculties: 'Faculties',
        verify: 'Document signature verification',
        address: 'Address',
        qrGenerator: 'QR generator',
        generate: 'Generate',
        selectFormat: 'Select format',
        notifications: 'Notifications',
        noResult: 'No records found',
        no_password: 'Please enter a password',
        unauth: 'The information you entered is incorrect',
        incorect_password: 'Incorrect password',
        no_username: 'Please enter a username',
        continue: "Continue",
        changeOrganization: "Change organization",
        changeSigner: "Change signer",
        change: "Change",
        unknownUser: "Guest",
        doNotShowAnymore: "Do not show anymore",
        showMore: "Show more"
    },
    positions: {
        menuTitle: 'Change position',
        beginText: 'You are logged in as: ',
        individual: 'individual',
        changePosition: 'Change',
        continue: 'Continue without change',
    },
    bank: {
        title: "Banks",
        title2: "Bank",
        card: "Card",
        swift: "Swift",
        account: "Correspondent account",
        requisite: "Bank details",
        accnumber: "Account number"
    },
    contact: {
        title: "Contact Information",
        address: "Legal address",
        postaddress: "Postal address",
        locality: "Locality",
        phone: "Phone number",
        email: "Email",
        bin: "BIN",
        iin: "IIN",
        mailto: "Write a letter",
        fname: "First name",
        lname: "Last name",
        sname: "Second name",
        fnameLatin: "First name (latin)",
        lnameLatin: "Last name (latin)",
        snameLatin: "Second name (latin)",
        birthday: "Date of birth",
        position: "Position",
        gender: "gender",
        idcard: {
            requisite: "Document details",
            givenorg: "Issuing authority",
            givendate: "Date of issue",
            expire: "Expiration date",
        },
        message: {
            validEmail: "Please enter a valid email address",
        },
        nameInLatin: "Name in latin",
    },
    cafedra: {
        practiceResponsibles: "Responsible for the practice",
        practiceManager: "Practice manager",
        title: "Academic department of {name}",
        responsible: "Responsible",
    },
    contragent: {
        form: "Organization form",
        active: "Active",
        inactive: "Inactive",
        resident: "Resident",
        noneresident: "None resident",
        dossier: "Open dossier",
        organization: "Organizations",
        title: "Contragents",
        missingDetails: "Details of the selected counterparty are not fully indicated (BIN, etc.). Please provide missing details.",
        menu: {
            select: "Select",
        },
        columns: {
            name: "Name",
            bin: "BIN",
        },
        orgEmployees: "{org} employees",
    },
    doctemplate: {
        title: "Document template creation",
        templates: "Documents templates",
        selected: "Selected template",
        description: "Short description of template",
        newTemplate: "New template",
        updateTemplate: "Update template",
        saveTemplate: "Save template",
        download: "Download template",
        approvingUsers: "Approving person (s)",
        message: {
            notSelected: "No template selected",
            downloadError: "Failed to download template",
            textNotFilled: "Document text is not entered",
            succesUpdated: "Template updated successfully ",
            descriptionNotFilled: "Short description of the template is not entered ",
            succesFilled: "The new template has been added. Enter template text.",
        },
        editor: {
            contractElements: "Contract elements",
            contragent: "Counterparty",
            ourside: "Университет",
            period: "Period",
            number: "Number",
            text: "Text",
            student: "Student",
            individualEntrepreneur: "Individual entrepreneur",
            place: "Place of contract",
            date: "Date of contract",
            addElement: "Adding a contract element",
            practiceType: "Practice type",
            educationProgram: "Educational programs",
            message: {}
        },
        needsApproval: "The document created according to the template requires approval",
        approvalUsers: "List of approvers",
    },
    contracts: {
        card: "Card",
        columns: {
            createDate: "Date of creation",
            author: "Author",
            department: "Department/Group",
            regNumber: "Registration number",
            regDate: "Registration date",
            description: "Description",
            status: "Status",
            number: "№",
            work_type: "Work types",
            results: "Results",
        },
        filter: {
            button: "Fitler",
            author: "Author",
            status: "Status",
            createdFrom: "Date of creation from",
            createdTo: "Date of creation to",
            contractType: {
                label: "Contract type",
                byTemplate: "From template",
                fromReadyDoc: "From a finished document",
            },
            templateType: "Template type",
            documentName: "Contract name",
            folder: "Contract catalog",
        },
        title: "Contracts",
        autogenerate: "Will be generated automatically when signing or registering",
        contract: "Contract",
        documents: "Contract documents",
        create: "Fast creation of contracts, agreements",
        template: "Contract templates",
        list: "Register of contracts ",
        listdesc: "List of all contracts, agreements",
        journal: "Journal of contracts",
        orgdesc: "Organizations we interact with",
        person: "Individuals with whom we interact",
        preliminary: "preliminary",
        regnum: "Reg. N",
        reserveNumber: "Number reservation",
        signer: "Signer",
        signing: "Signing",
        fromtemplate: "From template",
        fromdoc: "From a finished document",
        message: {
            created: "Draft contract has been successfully created"
        },
        setnumber: "Set number",
        assigner: "Assigner",
        cafedraGroup: 'Department/Group',
        menu: {
            newDocument: "New document",
            relatedDocument: "Related documents",
            journal: "Register of related documents",
            actsJournal: "Register of acts",
            actsJournalDesc: "List of acts to be signed and executed",
            acts: "Act",
            sendForExecution: "Send for execution",
            tocontragent: "Send to counterparty",
            toSciadvisor: "Send to the scientific supervisor",
        },
        contragentEmail: "Counterparty email",
        contragentRequest: "In approval by counterparty",
        contragentMessage: "Use the link for counterparty consent",
        contragentWarning: "No counterparty consent has been requested for this contract or you do not have permission to view this document!",
        contragentSigner: "Signer from your side",
        agreeAndSign: "Agree and sign",
        listOfApprovals: "List of approvers",
        listOfSigners: "Signers",
        labels: {
            registration_number: "Registration number",
            registration_date: "Date of registration of the act",
            parent_registration_number: "Registration number of the agreement",
            parent_registration_date: "Date of registration of the agreement",
            executor: "Executor",
            sciadvisor: "Scientific adviser",
            table: "Completed work",
            act_amount: "Act amount",
            act_amount_words: "Act amount (in words)",
            justification: "Justification",
            agreement: "Research contract",
            research_topic: "Research topic",
            act_amount_after: "Act amount after taxes",
            act_amount_after_words: "Act amount (in words) after taxes",
            attachments: "Attachments (annotated report, anti-plagiarism, etc.)",
        },
        newWork: "Add a new work",
        sciadvisorRequest: "To be approved by the scientific supervisor",
        execution: "In execution",
        executed: "Executed",
    },
    hdfs: {
        archiveBtn: "Аrchive",
        title: "Files",
        fileName: "File name",
        download: "Download",
        remove: "Remove",
        uploadTitle: "Uploading Files",
        chooseFile: "Select a file",
        uploadBtn: "Upload",
        cancelBtn: "Cancel",
        success: "Success",
        toastMsg: "File Uploaded",
        fileRemoved: "File removed",
        dragMsg: "Drag and drop files to here to upload",
        search: "Search",
        noData: "No data",
        loading: "Loading...",
        umktitle: "Enter the parameters of the syllabus",
        modulname: "Module code and name:",
        eduprogram: "Education program code and name:",
        discipline: "Discipline code and name:",
        logo: "logo"
    },
    ncasigner: {
        chooseFile: "Select  the file",
        qrSinging: "You can also sign the document using the mobile application \"eGov mobile\" by scanning this QR code:",
        noteMark: "By continuing to use the Smart.ENU service, you consent to the collection, processing and storage of your personal data to the extent contained in the certificate (electronic digital signature) of the NCA for the purpose of displaying electronic signature data.",
        docIdNotExistMessageForFind: "In order to find the signed document page by file, the correct SIGNERAPP identifier must be present in the file name. Make sure that the correct SIGNERAPP ID is specified in your file name.",
        docIdNotExistMessageForSign: "In order to sign a previously signed document by file, the correct SIGNERAPP identifier must be present in the file name. Make sure that the correct SIGNERAPP ID is specified in your file name. Otherwise, specify the file name without the SIGNERAPP identifier to create a new signature chain.",
        reload: "Reload the page and try again",
        fileWithIdNotFound: "The file with this identifier {dn} was not found in the SIGNERAPP system",
        signedDocPageTitle: "Page of the signed document {name}",
        linkForOthersTitle: "Use the link to the page of the signed document in order to give others the opportunity to check signatures and sign this document:",
        copy: "Copy",
        filHasNoIdTitle: "The SIGNERAPP ID is missing in the name of the file you selected",
        fileHasNoIdContent: "In order to find the signed document page by file, the SIGNERAPP identifier must be present in the file name. Try to find a file of the following format:",
        IncorrectFileTitle: "A file with this name {dn} failed signature verification in the SIGNERAPP system",
        IncorrectFileContent: "This file has been modified or another file has been provided. Please check the file.",
        signed: "he/she signed this document",
        approved: "he/she approved this document",
        signingexpected: "Signing is expected",
        approvingExpected: "Approving is expected",
        certTemplate: "Certificate Template: ",
        IIN: "IIN",
        certType: "Signature type: ",
        exportCMS: "Export a signature to a file",
        //
        signNotFoundById: "Couldn't find a signature for this ID!",
        //
        successSentToSign: "Sent to sign",
        successSignTitle: "File has been successfully signed!",
        successSignContentFirstRow: "Your signature has been verified and has been registered in SIGNAPP",
        successSignContentSecondRow: "We recommend saving a copy of the signed file with the <b>SIGNAPP ID</b>. In the future, this will simplify the search for the signed document page in the SIGNAPP service.",
        saveFileCopyWithId: "Save a copy of the signed file with the ID",
        changeNameManually: "You can also rename the file yourself as follows:",
        goToDoc: "Go to the document",
        successCopy: "Successfully copied to the clipboard!",
        failCopy: "Copying succeeded",
        findDocTitle: "Document Search",
        //
        chosenFile: "Selected file: {fn}",
        //
        find: "Find",
        tsp: "Put a timestamp",
        tspDescription: "Checking the timestamp is carried out for electronic documents of long-term storage. The time stamp is generated at the moment of signing an electronic document when a positive result of the EDS verification is determined, thereby being a proof of signing the document at a specified point in time.",
        signatureListTitle: "List of signatures",
        success: {
            header: "Verification of all signatures registered in the system has been successfully completed!",
            subHeader: "This suggests that:",
            firstRow: "all signatures registered in the system are correct;",
            secondRow: "the document that was just submitted for verification was signed, no one made any changes to it.",
            //
            signSuccess: "The document has been successfully signed!"
        },
        error: {
            api: {
                emptySignerList: "The list of signers is empty.",
                caCertNotFound: "The Kazakhstan NCA root certificate was not found",
                signerNotInitialized: 'Signer not initialized',
                notUniqueSigner: 'Signer uniqueness violated',
                documentAlreadySigned: 'The document has already been signed',
                xmlGeneration: 'Error generating XML file.',
                zipGeneration: 'Error generating ZIP file.',
                fileServer: 'Error getting file from storage server',
                fileServerNoResponse: 'Error getting file from storage server. Empty response.',
                failedFileUploading: 'Error uploading file to storage server.',
                unzip: 'Error unpacking ZIP file.'
            },
            signature: {
                cms: {
                    notVerified: "Failed to verify CMS signature.",
                    process: "Failed to process the CMS signature.",
                    emptyData: "There are no initial data for verifying the CMS signature.",
                    multipleSigning: 'An error occurred while calculating the hash of the document.'
                },
            },
            tsp: {
                process: "Failed to verify the timestamp of the electronic signature.",
                notFound: "The timestamp on the electronic signature was not found.",
                notVerified: "The timestamp of the electronic signature did not pass the verification.",
            },
            certificate: {
                notFound: 'Certificate not found',
                process: "Failed to process the certificate that was obtained from the signing CMS.",
                extract: "Failed to get user certificate from CMS signature.",
                policy: "Unknown certificate policy.",
                mismatchIin: "The IIN received from the certificate is not equal to the user's IIN",
                individual: "The certificate does not belong to an individual",
                ceo: "The certificate does not belong to the first manager",
                financialSignRight: "The certificate does not have the right to sign financial documents",
                signRight: "The certificate does not have the right to be signed",
                hrWorker: "The certificate does not belong to an employee of the HR department",
                employee: "The certificate does not belong to an employee of the organization.",
                expiredOrNotYetValid: "Certificate expired or The validity period of the certificate has not yet arrived",
                notForSigning: "The certificate is not intended for signing",
                notForAuth: "The certificate is not intended for authorization.",
                signRightsNotFound: "The certificate does not have the right to sign documents (required algorithm: GOST)",
                mismatchBin: "The BIN obtained from the certificate is not equal to the BIN specified in the request.",
                requiredBin: "Empty value of the BIN of the organization in the request to sign the document."
            },
            revocation: {
                process: "Failed to check the certificate for revocation.",
                revoked: "The signing certificate you are using has been revoked.",
            }

        },
        verifySignatureTitle: "Check the signature under the document",
        verify: "Verify",
        signDocTitle: "Sign the document",
        sign: "To sign",
        chooseDocument: "Select the document!",
        failToBase64: "Failed to convert file to Base64 format",
        signError: "Signature error",
        docNotFoundById: "Could not find a document for this ID!",
        failConnectToNcaLayer: "Failed to connect to NCALayer",
        failToSign: "Failed to sign the document!",
        notEnoughRights: "You don't have enough rights to sign the document!",
        failToSendDoc: "The document ID could not be sent to the server!",

    },
    publicReception: {
        title: "Public reception",
    },
    smartenu: {
        NormDoc: "Document",
        uploadNormDoc: "Uploading documents",
        catalogNormDoc: "Catalog of regulatory documents",
        chooseCatalogNormDoc: "select a regulatory document",
        chooseSuperiorCatalogNormDoc: "Select a higher regulatory document",
        createOrEditCatalogNormDoc: "Create/edit regulatory documents",
        catalogNormDocNotFound: "Catalog of regulatory documents not found",
        loadingcatalogNormDoc: "Loading regulatory documents. Please wait.",
        category: "Сategory",
        categories: "categories",
        selectCategories: "Select categories",
        newsList: "News list",
        newsTitle: "News",
        eventsTitle: "Events",
        newsNotFound: "News not found",
        eventsNotFound: "Events not found",
        loadingNews: "Loading news. Please wait.",
        loadingEvents: "Loading events. Please wait.",
        newsCategoriesTitle: "News categories",
        createOrEditNewsCategory: "Create/edit news category",
        createNews: "Create news",
        editNews: "Edit news",
        createOrEditEvents: "Create/edit events",
        chooseCategory: "select a category",
        parent: "parent category",
        categoriesNotFound: "Categories not found",
        loadingCategories: "Loading categories. Please wait.",
        saveCategoryError: "Failed to save category",
        loadAllCategoriesError: "Failed to get categories",
        delNewsCategoryError: "Failed to delete category",
        chooseSuperiorCategory: "Select a higher category",
        saveSuccess: "Saved successfully.",
        chooseImage1: "Upload picture 1",
        chooseImage2: "Upload picture 2",
        chooseMainImage: "Upload main picture",
        chooseAdditionalImage: "Upload additional picture",
        chooseAdditionalFile: "Upload file",
        delNewsError: "Failed to delete news",
        saveNewsError: "Failed to save news",
        loadAllNewsError: "Failed to get news",
        rejectReason: "Rejection reason: {fn}",
        dataAndTime: "Date and time: {fn}",
        eventFormat: "format",
        eventFormatView: "Format: {fn}",
        participantsCategory: "participant category",
        participantsCategoryView: "Participant category: {fn}",
        meetingLink: "link to video conference",
        meetingLinkView: "Video conference link:",
        meetingLocation: "event location",
        meetingLocationView: "Event Location: {fn}",
        loadAllEventsError: "Failed to get events",
        delEventError: "Failed to delete event",
        saveEventError: "Failed to save event",
        selectMainCategory: "Select main category",
        selectMaster: "Select Master's course",
        selectBachelor: "Select bachelor course",
        selectFaculty: "Select faculty",
        selectDepartment: "Select department",
        eventParticipants: "Participants list",
        titleKzInvalid: "The name in Kazakh is not filled",
        titleRuInvalid: "The name in Russian is not filled",
        titleEnInvalid: "The name in English is not filled",
        contentKzInvalid: "Content in Kazakh is not filled",
        contentRuInvalid: "Content in Russian is not filled",
        contentEnInvalid: "Content in English is not filled",
        image1Invalid: "Image not found",
        selectedCatInvalid: "Category not selected",
        isOnlineInvalid: "The format of the event is not selected",
        eventLinkInvalid: "The link to the event is not filled in",
        eventLocationInvalid: "The address of the event is not filled in",
        posterImageKk: "Upload poster in kazakh",
        posterImageRu: "Upload poster in russian",
        posterImageEn: "Upload poster in english",
        posterLink: "Poster link",
        addPoster: "Add poster",
        posterImageKkInvalid: "The poster in Kazakh not selected",
        posterImageRuInvalid: "The poster in Russian not selected",
        posterImageEnInvalid: "The poster in English not selected",
    },
    vaccination: {
        title: "Vaccination",
        list: "Vaccinated List",
        pasport: "Vaccination passport",
        plannedDate: "Planned date",
        date1: "Date (1st component)",
        date2: "Date (2nd component)",
        doctorsNote: "Doctor’s Note",
        vaccine: "Vaccine",
        fillVacTitle: "Enter the name of the vaccine",
        clinic: "Clinic",
        status: {
            firstcomponent: "1st component",
            vaccinated: "vacinated",
            planned: "planned",
            rejected: "medical exemptions",
            noData: "No data",
            minor: "no 18",
        },
        error: {
            list: "vaccine list not loaded"
        }
    },
    dissertation: {
        title: "Dissertation council",
        council: {
            list: "List of councils",
        },
        inactive: "Inactive",
        directionCode: "Code and name of the direction of personnel training",
        defenseConduct: "Conducting a defense",
        doctorals: "Doctoral students",
        doctoralCard: "Doctoral student card",
        disstitle: "Dissertation title",
        abstractFile: "Abstract file",
        dissertationFile: "Dissertation file",
        swList: "List of scientific papers",
        members: "Members of the Dissertation Council",
        specialityCode: "Specialty code and name",
        secretaryname: "Full name of the scientific secretary",
        secretary: "Scientific secretary",
        advisors: "Scientific consultants",
        reviewers: "Official reviewers",
        protocol: "VOTING PROTOCOL OF THE DISSERT COUNCIL",
        permanentMember: "Permanent members",
        tempMember: "Temporary members",
        meetingTime: "Meeting time",
        defenseLang: "Defense language",
        councilDecision: "Council decision",
        setMeetingTime: "Schedule a defense day",
        startRegistration: "Start registration",
        finishRegistration: "Finish registration",
        startVoting: "Start voting",
        finishVoting: "Finish voting",
        validationErrors: {
            selectSpeciality: "Please select a specialty",
            selectDepartment: "Select a faculty",
            selectSecretary: "Please select a scientific secretary",
            selectMember: "Please select a council member",
            selectCreatedDate: "Select a a created date",
            selectDoctorals: "Select doctoral students for which the named person is a reviewer"
        },
        vote: {
            v1: "to award the degree of Doctor of Philosophy (PhD) or Doctor of Science",
            v2: "send the dissertation for revision",
            v3: "submit the thesis for re-defense",
            v4: "refuse to award the degree of Doctor of Philosophy (PhD) or Doctor of Science",
            v5: "TOTAL"
        },
        message: {
            hasSameMember: "The user already has a council membership",
            saveKey: "Voting is anonymous: we do not store your voting result. Please save or download this password to check your vote in the future. The password is known only to you and is not available for recovery.",
            notRegistered: "You cannot vote, because you are not registered",
            enterKey: "Enter the password you used to vote to decrypt your vote",
            votingRestarted: "The dissertataion has been submitted for re-voting",
        },
        states: {
            s0: "created",
            s1: "defend date assigned",
            s2: "registration in progress",
            s3: "registration completed",
            s4: "voting in progress",
            s5: "voting completed",
            s6: "to award the degree of Doctor of Philosophy (PhD) or Doctor of Science",
            s7: "send the dissertation for revision",
            s8: "revote",
            s9: "submit the dissertation for re-defense",
            s10: "refuse to award the degree of Doctor of Philosophy (PhD) or Doctor of Science",
        },
        userOtherCouncils: 'The user\'s attitude to other dissertation councils',
        closeDate: 'Date of termination',
        councilComment: 'Order number, etc.',
        closeCouncil: 'Termination of the dissertation council',
        scientificConsultant: 'Review of the scientific consultant',
        foreignConsultant: 'Review of foreign consultant',
        commissionConclusion: 'Conclusion of the ethical assessment committee',
        reviewerComment: 'Official reviewer\'s review',
        setMeetingTimeConfirmMsg: "By clicking the {btn} button below, you confirm the correctness of the information and this information is published in the form of an announcement on the site.",
        addMemeberToDisCouncil: 'Add Member to The Dissertation Council',
        meetingDateMessage: 'You can start the Conducting a defence only one day before',
        scienceConsultantInfo: 'Science Consultant',
        foreignConsultantInfo: 'Foreign Consultant',
        videoLink: 'Link to video',
        dissertationList: 'Dissertation reports',
        doctorantFullName: 'Doctorant Fullname',
        doctorantBirthday: 'Year of birth',
        abbreYear: 'yr.',
        abbreYear2: 'yrs.',
        drStudyPeriod: 'The period of study in doctoral studies',
        drStudiedUniver: 'University where the doctoral student studied',
        sciConsultants: 'Scientific consultants (name, degree, place of work)',
        officialReviewers: 'Official reviewers (name, degree, place of work)',
        protectionDate: 'Protection date',
        dissCouncilDecision: 'Adopted decision of the dissertation council',
        drDiplomeNo: 'Diploma №',
        showMember: 'Show',
        dissYear: 'Year',
        dissQuarter: 'Quarter',
        selectYear: 'Select a year',
        selectLanguage: 'Choose your language',
        selectQuarter: 'Select a quarter',
        generateReport: 'Generate Report',
        addDissertationReport: 'Add a dissertation report',
        dissReportLanguage: 'Language',
        dissReportActions: 'Actions',
        dissReportView: 'View Report',
        dissReportDelete: 'Delete Report',
        selectDateRanges: 'Select a datetime ranges',
        editReport: 'Edit Report',
        addReport: 'Add Report',
        sendReportForSign: 'Send the report for signature',
        doYouWantSendReport: "Are you sure to submit this report for signature?",
        videoValid: 'Only videos from the YouTube platform are allowed'
    },
    faq: {
        title: "Help desk",
        addFaq: "Ask a question",
        loading: "Wait...",
        question: "Question",
        recipient: "Recipient",
        status: "Status",
        sendDate: "Send date",
        createDate: "Date of creation",
        attachments: "Attachments",
        toAnswer: "To answer",
        forward: "Forward",
        selectRecipient: "Select the recipient",
        uploadImage: "Add a picture",
        uploadFile: "Add a file",
        answer: "Answer",
        noAnswer: "No response received",
        answerConfirm: "The answer will be sent to the sender of the question. Save and send the answer?",
        rejected: "Отменили выполнение действия"

    },
    // ENU New WebPaga
    web: {
        mainMenuTitle: "ENU Website",
        menuPage: "Menus",
        menuMainPage: "Page",
        menuOrder: "Order",
        menuParent: "Parent menu",
        addMenu: "Add Menu",
        isMainMenu: "Main Menu",
        pageLink: "Pages",
        addPage: "Add Page",
        editMenu: "Edit menu",
        addEditPageTitle: "Create/Edit Pages",
        selectParentMenu: "Choose Parent Menu",
        selectMenu: "Select Menu",
        selectPage: "Select Page",
        selectMainPage: "Choose Page",
        giveCustomLink: "Setup External Link",
        createNewPageButton: "Create New Page",
        menuOrderLabel: "Menu Order",
        customLinkInvalid: "Custom Link Required",
        createdMenuSuccessMsg: "The menu has been created successfully",
        createdPageSuccessMsg: "The page has been created successfully",
        updatedPageSuccessMsg: "The page has been updated successfully",
        createPage: "Create page",
        editPage: "Edit page",
        menuType: "Menu type",
        page: "Page",
        parentMenu: 'Parent Menu',
        onMain: "On the main",
        addBlock: "Add block",
        editBlock: "Edit block",
        blockName: "Block name",
        blockType: "Block type",
        content: "Content",
        list: "List",
        blocks: "Blocks",
        createElement: "Add element",
        editElement: "Edit element",
        view: "Display",
        grid: "Tile",
        isHidden: "Hidden",
        addToUsefulLink: "Add to useful links",
        usefulLinkDescKZ: "Brief description of useful link in Kazakh",
        usefulLinkDescRU: "Brief description of the useful link in Russian",
        usefulLinkDescEN: "Brief description of useful link in English",
        bgImg: "Background image",
        plugin: "Plugin",
        blog: "Blog",
        chooseDegree: "Choose an academic degree",
        chooseEduProgram: "Choose an educational program",
        year: "Select year",
        price: "Price",
        degreeLevel: "Academic degree",
        shortInfo: "Brief information",
        enrollDocs: "List of documents for enrollment",
        programName: "Name of educational programs",
        qazaqGroups: "Education in Kazakh",
        russianGroups: "Education in Russian",
        eduDirections: "Choose an academic directions",
        chooseProgram: "Choose an academic program",
        testType: "Test types",
        passingScore: "Points",
        chooseTest: "Choose the type of exam",
        currency: "Currency",
        note: "Note",
        siteSettings: "Site settings",
        mourningMode: 'Mourning mode',
        SiteMaintenanceMode: 'Maintenance mode',
        siteLogs: "Website Logs",
        tableName: "Table Name",
        recordId: "Record ID",
        actionID: "Actions",
        ipAddress: "IP Address",
        logUser: "User Name",
        properties: "Properties",
        history: "History",
        optionalField: "Optional",
        listType: "List Type",
        webHelp: "See an example",
        simpleListExe: "Simple List Example",
        gridListExe: "Simple Grid List Example",
        accordionListExample: "Simple Accordion List Example",
        gridAccordionListExample: "Simple Grid Accordion List Example",
        cardListExample: "Simple Card List Example",
        gridCardListExample: "Simple Grid Card List Example",
        exampleTitle: "Title",
        exampleContent: "Example content",
        mainMenu: "Main menu",
        headerMenu: "Header menu",
        middleMenu: "Middle menu",
        usefulMenu: "Useful menu",
        onMiddle: 'Middle menu',
        commonSettings: 'Settings',
        universityAddressInfo: 'Contact Address',
        websiteAddress: 'Website',
        universityAddressKZ: 'Address (Kazakh)',
        universityAddressRU: 'Address (Russian)',
        universityAddressEN: 'Address (English)',
        universityFax: 'Fax',
        viewCount: 'View count',
        viewTimes: 'times',
        sitePreviewLink: 'Preview Link',
        editAnswer: 'Edit answer',
        editAnswerConfirm: 'Are you sure you want to make changes to the answer?',
        facultyName: 'Faculty Name',
        menuIcon: 'Menu Icon',
        uploadMenuIcon: 'Select an Icon',
        domain: 'Domain'
    },
    //Student locale
    student: {
        clubs: "ENU Clubs",
        pageTitle: "ENU Clubs",
    },
    hr: {
        action: {
            interview: 'Invite to interview',
            hire: 'Hire',
            notHire: 'Reject',
            reserve: 'To reserve',
            apply: 'Respond',
            applied: 'Respond sent',
            applied2: 'You have already applied for this position.'
        },
        candidates: 'Candidates',
        candidateResume: 'Candidate resume',
        vacancySource: 'Source of vacancy information',
        motivationLetter: 'Motivation letter',
        sendMessage: 'Send email',
        messageTitle: 'Email header',
        messageBody: 'Content of the email',
        crAndUpdEdu: 'Creating and editing education',
        sp: {
            header: 'The selection process for vacant positions takes place in several stages',
            label1: 'consideration of resumes of candidates for filling vacant positions of teaching staff, AUP and HR;',
            label2: 'an interview with an HR specialist and the head of the structural \n ' +
                '                unit who applied for recruitment;',
            label3: 'interview with members of the Competition Commission and summing up the results of the competition.',
            agreement: 'I have read the rules and certify that the information in my personal resume is correct.\n ' +
                '                   I consent to the verification of the provided data.',
            request: 'Submit an application'
        },
        vacancies: "Vacancies",
        responsibilitiesLabel: "Functional responsibilities",
        educationLabel: "Education",
        qualificationLabel: "Qualification in the specialty",
        experienceLabel: "Required professional experience",
        languageLevelLabel: "The level of knowledge of languages",
        certificateRequirementsLabel: "Availability of certificates, diplomas",
        personalQualitiesLabel: "Personal qualities",
        workConditionLabel: "Working conditions",
        title: {
            general: 'General information',
            degreeAndTitle: 'The presence of a scientific degree and academic title',
            academicDegree: 'Academic degree',
            academicTitle: ' Academic title',
            academicDetail: 'Publications, scientific works, inventions, state awards, encouragement (diplomas, etc.)',
            education: 'Education',
            experience: 'Required professional experience',
            id: 'ID card',
            info: 'Other important information',
            language: 'Languages',
            referee: 'List of people who can refer you',
            refresherCourse: 'Refresher courses, seminars and internships'
        },
        resume: {
            loading: 'Resume is uploading. Please wait...',
            create: 'Create a resume',
            delete: 'Delete resume',
        },
        resumeNorFound: 'Your resume was not found. Would you like to create?',
        ad: {
            defensePlace: 'Defense place',
            defenseDate: 'Defense date',
            diplomaNumber: 'Diploma number',
        },
        edu: {
            institution: 'Institution',
            institutionAddress: 'Institution address',
            receiptDate: 'Receipt date',
            expirationDate: 'Expiration date',
        },
        we: {
            responsibilities: 'Responsibilities',
            untilNow: 'Until now'
        },
        id: {
            startDate: 'Date of issue',
            issuedBy: 'Issued by'
        },
        lang: {
            pl: 'Proficiency level',
            rl: 'Reading level',
            wl: 'Writing level',
            sl: 'Speaking level',
            cs: 'Certificates',
            c: 'Certificate',
            native: 'Free',
            notNative: 'Limited',
        },
        rc: {
            title: 'Title'
        }
        ,
        sendingMessage: 'Sending a message. Please wait...',
        petition: {
            download: 'Download petition',
            lang: 'Select the language of the petition.',
            number: 'Outgoing document number',
            warn: 'Attention! Before sending the message, it is required to sign the petition by the first head.',
            success: 'The document has been successfully signed! Send a letter to the candidate.',
            info: 'The document has been successfully created. Download the document to check it out. Next, sign the electronic document using the digital signature of the first head of your organization.',
            error: 'The petition was not signed. Please make sure you have created the document and signed it.'
        },
        report: {
            title: 'Report',
            success: 'Successfully generated!'
        },
        doc: {
            upInOne: '(upload in one file)',
            up: 'Uploading Documents',
            eh: 'Employment history',
            diploma: 'Diploma of Education with Applications',
            certs: 'Professional Development Documents',
            pension: 'Pension contract',
            medCert: 'Medical certificate 075, chest x-ray',
            narcoCert: 'Certificate from the narcological dispensary',
            psychoCert: 'Certificate from the psycho-neurological dispensary',
            gcCert: 'Certificate of presence or absence of a criminal record',
            mId: 'Military ID',
            signedResumeDownload: 'Signed resume',
            resumeDownload: 'Download resume',
            resumeSign: 'Sign resume',
            chooseSignWay: 'Choose a resume signing method',
            resumeView: 'Open resume',
            upSignedResume: 'Upload signed resume',
            resumeSuccessSigned: 'Resume successfully signed',
            digital: 'EDS',
            paper: 'On paper',
            financial: "Requires approval from the finance department",
        }
    },
    workPlan: {
        plans: "Plans",
        planName: "Plan Name",
        addPlan: "Add plan",
        addEvent: "Add event",
        eventName: "Event name",
        approvalUsers: "Responsible persons",
        quarter: "Quarter",
        executionResult: "Execution result",
        attachments: "Attached files",
        viewPlan: "View plan",
        reports: "Reports",
        events: "Events",
        performEvent: "Perform an event",
        reportName: "Report name",
        createReport: "Create report",
        toCorrect: "Send for correction",
        editEvent: "Edit Event",
        errors: {
            eventNameError: "Enter the name of the event",
            approvalUserError: "Select the responsible persons",
            quarterError: "Select a quarter",
            langError: "Choose language",
        },
        message: {
            eventCreated: "Event created successfully",
            eventChanged: "Event has been successfully edited",
            reportSentToApprove: "The report was successfully sent for approval",
            planSentToApprove: "Plan sent for revision",
            planCreated: "Plan successfully created",
            maxFileUploadSize: "You cannot upload more than 10 files at once"
        },
        reportTypes: {
            year: "Annual",
            quarter: "Quarterly",
            halfYear: "Semi-annual"
        },
        quarterYear: "Whole year",
        resultIndicator: "Indicator of direct results",
        summary: "Summary/Confirmation",
        respExecutor: "Responsible performers",
        halfYear: "semi-annual",
        simplePlan: "Plan",
        operationalPlan: "Operational Plan",
        planType: "Plan Type",
        myPlans: "My Plans",
        plancontractname: "Name of the contract",
        plancontractnumber: "Contract number",
        plancontractdate: "Contract date",
        plancontractprioruty: "By priority",
        plancontracttopic: "On topic",
        scienceParticipants: "Project participants",
        generateAct: "Form an act",
        minWordCount: "It should be between 50 and 250 words",
        maxWordCount: "It should be between 50 and 250 words"
    },
    queue: {

        title: "Queue",
        secretary: "Maintenance",
        queues: "Queues",
        responsible: "Responsible",
        queueNotFound: "Queue not found",
        createQueue: "Create/Modify Queue",
        next: "Next",
        number: "Queue number",
        terminal: "Terminal",
        tv: "TV",
        count: "There are {n} people waiting in front of you",
        operator: "Operator",
        ticketCount: "Tickets queued:",
        downtime: "Downtime:",
        serviceTime: "Service time:",
        called: "Called visitor:",
        dnshowup: "Didn't show up",
        norows: "Queue not found",
        served: "Visitor served",
        redirect: "Redirect",
        selectTicket: "Select ticket",
        call: "Call",
        warning: "Take a photo of the coupon or print it by clicking on «Print». If you take a photo, be sure to close the window with the «Close button»!!!",
        calledcount: "Сalled",
        serviced: "Serviced",
        averageTime: "Average service time",
        redirected: "Redirected",
    },
    educomplex: {
        title: "Educational-methodical complex of the discipline",
        forme: "Concerning me",
        add: "Add",
        toapprove: "To approval",
        filter: "Filter",
        years: "Years",
        globalFilter: "Global filter",
        tooltip: {
            home: "Main list",
            previous: "Back",
            into: "Fall into",
            maximize: "Maximize",
            minimize: "Minimize",
            cover: "Cover",
            uncover: "Uncover",
            download: "Download",
            document: "Document information",
            revision: "Revision information",
            delete: "Delete document",
        },
        columns: {
            faculties: "Faculties",
            cafedras: "Cafedras of the {faculty}",
            name: "Name",
            author: "Author",
            year: "Year",
            state: "State",
        },
    },
    postaccmonrep: {
        title: "Self-assessment/post-accreditation monitoring report",
    },
    ref: {
        myRefs: "My references",
        open: "Card",
        getRef: "Get reference",
        get: "Get",
        createQr: "Assign a QR code and share",
        errorReport: "Report a data error in the document",
        send: "Send",
        correction: "Write your correction here. . .",
        sent: "Successfully submitted to HR.",
        failed: "Not sent, please try again.",
        requestInfo: "Request information",
        filter: "Filter",
        referenceDate: "Reference issue date",
        referenceNumber: "Reference number",
        referenceType: "Reference type",
        referenceStatus: "Status",
        additionalInfo: "Additional information",
        statusIssued: "Issued",
        statusRejected: "Rejected",
        statusApplied: "Applied",
        statusSalary: "Salary",
        statusErrorRequest: "Data error",
        statusSharedTooltip: "Copy the share link",
        folderName: "Folder",
        fileName: "Reference type",
        currentFolder: "Current folder:",
        salary: "With the salary amount",
        experience: "With work experience",
        salaryRequested: "Your request for a reference with the amount of salary is being processed by the Human Resources Manager.",
        referenceRejected: "Reference is not issued.",
    },
    requests: {
        menuTitle: 'Reference requests',
        requests: 'Requests',
        selectedRequest: 'Selected request',
        requestType: 'Request type',
        requestedUser: 'Requester',
        requestedTime: 'Date',
        information: 'Information',
        reference: 'Reference',
        save: 'Save and approve',
        reject: 'Reject request',
        commentary: 'Comment from requester',
        sendRequest: 'Send request',
        types: {
            reference_error_correction: 'To correct mistakes',
            reference_info_request: 'Additional information',
            reference_salary_request: 'Salary',
        },
        params: {
            full_name: 'Fullname',
            position: 'Position',
            registration_date: 'Registration date',
            registration_number: 'Registration number',
            salary_amount: 'Salary',
            structural_unit: 'Structural unit',
            work_start_date: 'Beginning of work',
        },
    },
    guide: {
        guide: 'Guide',
        pathName: 'Path name',
        guideName: 'Guide name',
        addGuide: 'Creating a guide',
        editGuide: 'Editing a guide',
        notGuide: 'There is no guide for this page yet!',
    },
    course: {
        title: 'Online courses',
        categories: 'Course categories',
        courses: 'Сourses',
        certificate: {
            title: "Certificates",
            template: 'Certificate templates',
            element: 'Element',
            elements: 'Elements',
            designer: 'Template designer',
            issue: "Issue certificate without application",
            issueWithApp: "Issue a certificate with application",
            view: "View the certificate",
            getQr: "Get QR",
            confirm: "Confirm the issuance of a certificate WITHOUT an application?",
            confirm2: "The certificate will be issued With the application, do you confirm the correctness of filling out the application?",
            certSelect: "Specify the certificate template"
        },

        modules: 'Сourse modules',
        module: 'Module',
        modulePosition: '№',
        moduleTitle: 'Title',
        moduleHours: 'Hours',
        moduleGrade: 'Grade',
        moduleName: 'Module name',
        modulePeriod: 'Module period',
        users: 'Сourse participants',
        user: 'Participant',
        organizers: 'Course organizers',
        lnum: 'last number',
        journalOfUsers: 'journal-users',
        journal: 'Journal',
        addCourse: 'Add to the course',
        completedTraining: 'Completed training',
        course: 'Course',
        startDate: 'Course start date',
        completionDate: 'Course completion date',
        disciplineCode: "Subject code",
        disciplineName: "Subject name",
        oodCourseName: "Courses in general education disciplines",
        deleteCertificate: "Delete certificate",
        deleteStudent: "Delete participant",
        сompleteTheCourse: "Complete the course",
        openNewThread: "Start a new stream",
        isNotAvailable: "Аccess is closed to apply for the course, expect a new stream",
        confirmation: "Confirmation",
        warning: "Warning",
        noGrades: "There are participants who have no grades!",
        noBeenTrained:"There are participants who have not been trained yet. Do you want them to be trained?",
        noIssuedCertificates:"Some participants were not issued certificates. Please issue certificates before completing the course!",
        completeCourse: "Are you sure you want to complete the course?",
        numberParticipants: "Number of participants",
        сompletedСourse: "Completed courses"
    },
    roleControl: {
        addSidebar: 'Adding new record',
        userChangeable: 'Changing default users',
        certificate: 'Certificate',
        title: 'Title',
        menuTitle: 'Organization management',
        roleTitle: 'Role management',
        rolePosRelTitle: 'Position-role management',
        rolePosTitle: 'Position management',
        giveRole: 'Give new role',
        givePosRoleRel: 'Give new position-role relation',
        givePosRel: 'Create a position',
        selectOrg: 'Select organization',
        selectPosition: 'Select a position',
        selectDep: 'Select department',
        selectRole: 'Select role',
        selectEmployee: 'Select employee',
        employeeIIN: 'IIN',
        employeeName: 'Employee name',
        employeeLabel: 'Employee',
        employeeNotFound: 'Employee with such IIN does not found',
        roleName: 'Role name',
        roleLabel: 'Role',
        departmentName: 'Name of the department',
        positionName: 'Position name',
        noResult: 'No records found',
        cantDelete: 'Cant delete the record',
        addNewInstance: 'Adding new approvers/signers',
        instance: 'Appover/signer',
        failedToDelete: 'Failed to delete',
        failedToLoad: 'Failed to load data',
        departmentRoleRel: 'Department-role management',
        giveDepartmentRoleRel: 'Give new department-role relation',
        nameDepartment: 'Name of department',
        selectDepartment: 'Select department',
    },
    blog: {
        title: 'Blog',
        welcomeTextKz: 'Welcome text in Kazakh',
        welcomeTextRu: 'Welcome text in Russian',
        welcomeTextEn: 'Welcome text in English',
        question: 'Questions'
    },
    verification: {
        title: 'Verify Electronic Document',
        new: 'New check',
        uploadEdoc: 'Select an electronic document',
        uploadEdocTitle: 'You must select an electronic document in *.cms format or an archive in *.zip format.',
        uploadMainDoc: 'Select signed document',
        notDataAttachedTitle: 'CMS signature does not contain signed data. Please select a source file:',
        successfulVerifying: 'Verification successful. The CMS signature contains the original data.',
        checkDataAttaching: 'Check for original data',
        signerNameTitle: 'Signed document: ',
        statusTitle: 'General check status: ',
        trueVerify: 'Successful',
        falseVerify: 'Unsuccessful',
        resultTitle: 'Result of certificate verification',
        tspTitle: 'TSP check result',
        signatureTitle: 'Result of signature verification',
        iin: 'IIN',
        fio: 'full name',
        bin: 'BIN',
        company: 'Organization name',
        serialNumber: 'Certificate serial number',
        validity: 'Certificate validity period',
        template: 'Certificate Template',
        signDate: 'Sign Date',
        individual: 'Individual',
        ceo: 'First manager',
        sign_right: 'Sign right',
        financial_sign_right: 'The right to sign financial documents',
        hr_worker: 'HR employee',
        internal: 'Employee of the organization',
    },
    responseExplanations: {
        badRequest: 'Your request could not be understood or was missing required parameters.',
        forbidden: 'Access to the requested resource is not allowed. This may be because you don\'t have the necessary permissions to access it.',
        forbiddenAction: 'Action prohibited. You don\'t have the required permissions.',
        internalServerError: 'We\'re sorry, something went wrong on our end. Please try again later.',
        unauthorized: 'The user is not authorized.',
        importAlreadyOnProcess: 'Import process is already on. Please wait for results.',
    },
    visuallyImpaired: {
        fontSize: "Font size",
        siteColors: "Site colors",
    },
    mgov: {
        inApp: "Required application: ",
        guidelineLabel: "To sign-in or sing document using QR-code",
        stepOne: "1. Open eGov Mobile app on your mobile device",
        stepTwo: "2. Open QR-code scanner in the right-upper corner of the main page",
        stepThree: "3. Point camera on this page to scan the code",
        mobileAppNotInstalled: "If you don't have eGov Mobile/Business application installed, scan the QR below",
    },
    integration: {
        title: 'Integrations',
        updateNow: 'Update now'
    },
    science: {
        activity: 'Scientific Activity',
        profile: 'Scientist profile',
        scientificWorks: 'List of scientific works',
        checkIndexStatus: 'Check Indexing Status',
        webOfSciencePublication: 'Publication in internationally peer-reviewed scientific journals indexed in Web of Science',
        scopusPublication: 'Publication in internationally peer-reviewed scientific journals indexed in Scopus',
        recommendedBy: 'Recommended by (University Academic Council)',
        linkToPublication: 'Link to publication',
        source: 'Source',
        publisher: 'Publisher',
        documentType: 'Document type',
        originalLanguage: 'Original language',
        indexed: 'Indexed',
        publicationsRecommendedQACFSHE: 'Publications recommended QACFSHE ',
        publicationRecommendedQACFSHE: 'Publication recommended QACFSHE ',
        sendRequestToAdd: 'Send a request to add a publication',
        requestToAddPublication: 'Request to add a publication',
        myRequests: 'My requests',
        edition: 'Edition',
        requestsToAdd: 'Requests to add',
        recommendedByQACFSHEKazakh: 'Name of the publication recommended by QACFSHE in Kazakh language',
        recommendedByQACFSHERussian: 'Edition of the publication recommended by QACFSHE in Russian',
        recommendedByQACFSHEEnglish: 'Edition of the publication recommended by QACFSHE in English',
        requester: 'Requester',
        selectedRequest: 'ВыбSelected requestс',
        yourRequestHasBeenApproved: 'Your request has been approved',
        yourRequestHasBeenRejected: 'Your request has been approved',
        scientists: 'Scientists university',
        areaScientificInterests: 'Area of scientific interests',
        laborActivity: 'Labor activity',
        awardsAndHonors: 'Awards and honors',
        professionalDevelopment: 'Professional development',
        typeOfAward: 'Type of award',
        reward: 'Reward',
        rewardKz: 'Name of the award in Kazakh',
        rewardRu: 'Name of the award in Russian',
        rewardEn: 'Name of the award in English',
        qualification: {
            trainingForm: 'Form of professional development',
            country: 'Country',
            city: 'City',
            start: 'Start date',
            end: 'End date',
            durationAndScope: 'Duration and scope (hour)',
            fundingSource: 'Funding source',
            typeSupportingDoc: 'Type of supporting document',
        },
        scientistsProfile: 'Profile Scientists',
        profileLink: 'Profile link',
        academicDegAndAcademicTit: 'Academic degree and academic title',
        currentPosition: 'Current position'
    },
    personalData: 'Personal information',
    yearPeriod: 'Period of years',
    scienceWorks: {
        title: "Scientific works",
        titleList: "Scientific works list",
        publicationType: "Type of the scientific work",
        editionTypes: {
            digital: "Digital",
            printed: "Printed",
        },
        publicationCategories: {
            beforeMastersThesis: "Scientific works published before the defense of the master's thesis",
            afterMastersThesis: "Scientific works published after the defense of the master's thesis",
        },
        buttons: {
            card: "Card",
            newPublication: "Add publication",
            generateListDialog: "List of scientific works",
            filter: "Filter",
            clear: "Clear",
            search: "Search",
            koksnvo: "QACFSHE",
            newList: "New list",
        },
        menu: {
            newArticle: "Create new",
            importFromPlatonus: "Platonus",
            importFromScopus: "Scopus",
            newPublicationsKoksnvo: "Request to add new publication recommended by QACFSHE",
            publicationsKoksnvo: "Publications recommended by QACFSHE",
            myRequests: "My requests",
            import: "Import",
        },
        columns: {
            name: "Publication title",
            type: "Publication type",
            author: "Author",
            year: "Year",
            status: "Status",
        },
        filter: {
            documentName: "Publication title",
            author: "Author",
            status: "Status",
            years: "Years",
        },
        types: {
            article: "Article",
            monograph: "Monograph",
            scopus_article: "Publications in Scopus",
            publication_koksnvo: "Publication recommended by QACFSHE",
            textbooks: "Textbooks / Teaching aids / Teaching aids / Workshops",
            free: "Scientific works",
        },
        messages: {
            successImport: "Import request sent successfully",
            successPlatonus: "Scientific works from Platonus are imported. Results will come later!",
            successScopus: "Scientific works from Scopus are imported. Results will come later!",
        },
        labels: {
            publicationName: "Name of the publication",
            publicationDate: "Publication year",
            editionType: "Type of edition",
            editionFullName: "Edition (title, year, page number) / No. of copyright certificate, patent",
            editionName: "Name of edition",
            editionNumber: "Edition number",
            editionYear: "Edition year",
            editionPages: "Pages in edition",
            issn: "ISSN",
            isbn: "ISBN",
            koksnvo: "Publication recommended QACFSHE",
            link: "Link to publication",
            printedPages: "Number of printed sheets",
            recommendedBy: "Recommended by (University Academic Council)",
            coauthorsInternal: "Internal co-authors, full name",
            coauthorsExternal: "External co-authors, full name",
            attachments: "Attachments",
            publicationCategory: "Publication category",
            publicationType: "Publication type",
            participationInGroup: "Participation in the team of authors",
        }
    },
    supportingDocument: "Supporting document",
    documentScan: 'Document Scan',
    fieldEducation: {
        title: 'Field of education',
        courseAuthor: 'Course author',
        duration: 'Duration',
        trainingFormat: 'Training format',
        purposeCourse: 'Purpose of the course',
        briefSummary: 'Brief summary',
        teachers: 'Teachers',
        aboutCourse: 'About the course',
        courseName: 'Course name',
        courseCode: 'Course code',
        prerequisites: 'Prerequisites',
        addPrerequisite: 'Add prerequisite',
        postrequisites: 'Postrequisites',
        addPostrequisite: 'Add postrequisite',
        addCourse: 'Adding a course',
        online: 'Online',
        offline: 'Offline',
        mixed: 'Mixed'
    },
    educationalPrograms: {
        name: 'Educational program',
        educationalProgramConstructor: 'Educational program constructor',
        bachelor: 'Bachelor',
        master: 'Master',
        doctoral: 'Doctoral',
        createEP: 'Create EP',
        formationEP: 'Formation of EP',
        goalsEP: 'Goals of EP',
        competencyMapReference: 'Competency map reference',
        creationCurriculum: 'Creation of the Curriculum, QED',
        codeAndNameGroupEP: 'Code and names of the group of educational programs',
        codeGroupAndEP: 'Code group and educational programs',
        directionTraining: 'Direction of training',
        fieldEducation: 'Field of education',
        nameGroupEPKZ: 'Name of the group of educational programs in Kazakh',
        nameGroupEPRU: 'Name of the group of educational programs in Russian',
        nameGroupEPEN: 'Name of the group of educational programs in English',
        descriptionGroupEPKZ: 'Description of the group of educational programs in Kazakh',
        descriptionGroupEPRU: 'Description of the group of educational programs in Russian',
        descriptionGroupEPEN: 'Description of the group of educational programs in English',
        purposeEPkz: 'Purpose of the EP in qazaq',
        purposeEPru: 'Purpose of the EP in russian',
        purposeEPen: 'Purpose of the EP in english',
        assignmentQualificationskz: 'Assignment of qualifications in qazaq',
        assignmentQualificationsru: 'Assignment of qualifications in russian',
        assignmentQualificationsen: 'Assignment of qualifications in english',
        trainingPeriodkz: 'Training period in qazaq',
        trainingPeriodru: 'Training period in russian',
        trainingPerioden: 'Training period in english',
        degreeAwardedkz: 'Degree awarded in qazaq',
        degreeAwardedru: 'Degree awarded in russian',
        degreeAwardeden: 'Degree awarded in english',
        typeEducationalProgram: 'Type of educational program',
        doubleDegreeProgram: 'Double degree program',
        jointEducationalProgram: 'Joint educational program',
        generalProfessionalCompetencieskz: 'General professional competencies in qazaq',
        generalProfessionalCompetenciesru: 'General professional competencies in russian',
        generalProfessionalCompetenciesen: 'General professional competencies  in english',
        professionalPompetencieskz: 'Professional competencies in qazaq',
        professionalPompetenciesru: 'Professional competencies in russian',
        professionalPompetenciesen: 'Professional competencies in english',
        addModule: 'Add module',
        addingModule: 'Adding a module',
        moduleName: 'Module name',
        moduleCode: 'Module code',
        courseName: 'Course name',
        academicCredits: 'Number of academic credits',
        cycle: 'Cycle',
        courseComponents: 'Course components',
        semester: 'Semester',
        lecture: 'Lecture',
        practice: 'Practice',
        laboratoryWork: 'Laboratory work',
        prp: 'PGP',
        preGraduatePractice: 'Pre-graduate practice',
        sro: 'IWS',
        independentWorkStudent: 'Independent work of the student',
        formControl: 'Form of control',
        addCourse: 'Add course',
        coursePrerequisitesCannot: 'The course you have chosen has prerequisites, so it cannot be selected',
        ook: 'GEC',
        generalEducationCourses: 'General education courses',
        bc: 'BC',
        basicCourses: 'Basic courses',
        pc: 'PC',
        profileCourses: 'Profile courses',
        rc: 'RC',
        requiredComponent: 'Required component',
        uk: 'UK',
        universityComponent: 'University component',
        oc: 'OC',
        optionalCourse: 'Optional course',
        currentEP: 'Current EP',
        newEP: 'New EP',
        innovativeEP: 'Innovative EP',
        formStudy: 'Form of study',
        specialization: 'Specialization',
        groupEP: 'Group of educational programs',
        ssdfgsdfg: 'sdfgsdfg',
    },
    helpDesk: {
        title: 'Service Desk',
        creationTime: 'Creation time',
        priority: 'Priority',
        responsible: 'Responsible',
        application: {
            applicationName: 'Applications',
            requestReason: 'Sending the Application',
            description: 'Description',
            contactNumber: 'Contact number',
            categoryApplication: 'Application category',
            choseAudience: 'Choose an audience',
            selectSpecialist: 'Choose a specialist',
            applicationNumber: 'Application Number:',
            created: 'Created',
            closed: 'Closed',
            date: 'application data'
        },

    }
}
