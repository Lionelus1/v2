export default {
    common: {
        chooseCert:"Choose the certificate",
        
        newPasswordError:"Passwords are not identical or character count is less than 5 symbol",
        changePassword:"Change password",
        newPassword:"Enter new password",
        newPasswordRe:"Repeat new password",
        administration: 'Administration',
        academicDegree: "Academic degree",
        academicTitle: "Academic title",
        annotation: "Annotation",
        approve: "Approve",
        action: {
            submit: 'Submit',
            accept: 'Accept',
            notAccept: 'Deny',
            sendToApprove: 'Send to Approve',
            approve: 'Approve',
            publish: 'Publish',
            reApprove: 'Reapprove'
        },
        cabinet: 'Personal account',
        login: "login",
        logout: "Logout",
        enter: "Type in",
        enterLogin: "Enter IIN or platonus mail",
        enterPassword: "Enter password",
        export: "Export",
        add: "Add",
        edit: "edit",
        orgname: "L.N. Gumilyov Eurasian National University",
        organizationName: 'Organization name',
        date: "Date",
        delete: "delete",
        department: "department",
        diplomNumber: "Diplom number",
        docFormat: "in doc format",
        downloadPassword: "Download password",
        voteKeyword: "Password to check voice",
        pdfFormat: "in pdf format",
        close: "close",
        name : "Name",
        createNew: "Create",
        created: "Created",
        createdBy: "Autor",
        checkMyVoice: "Check my voice",
        yourVoice: "Your vote: ",
        graduate: "Graduate",
        faculty: "Faculty",
        cafedra: "Кафедра",
        choose: "Choose",
        graduationyear: "Start of study",
        admissionyear: "Finish of study",
        fullName: "Full name",
        forStudentsAndGraduates: 'For students and graduates',
        hei: "HEI",
        updated: "Updated",
        type:   "Type",
        reason: "Reason",
        state: "State",
        status: "Status",
        show: "Show",
        save: "Save",
        speciality: "Speciality",
        download: "Download",
        lang: 'Language',
        learnlang: "Teaching language",
        loading: "loadind",
        toapprove: "To approval",
        tosign: "For signature",
        comment: "Comment",
        contacts: "Contacts",
        filter: "Filter",
        yes: "Yes",
        no: "No",
        select: "Select",
        cancel: "Cancel",
        code: "Code",
        main: "Main",
        meetingUrl: "Link to online meeting",
        meetingPlace: "Meeting place",
        myData: "My details",
        myResume: 'My resume',
        theResume: 'Resume',
        myVacancy: 'My vacancies',
        nameIn: "Name",
        nameInQazaq: "Name in qazaq",
        nameInRussian: "Name in russian",
        nameInEnglish: "Name in english",
        noComment: "No comment",
        noData: "No data",
        null : "unknown",
        number: "Number",
        other:  "Other",
        order: "Order",
        reserve: "Reserve",
        confirm: "Confirmation",
        confirmation: "Are you sure you want to proceed?",
        contentInQazaq: "Content in qazaq",
        contentInRussian: "Content in russian",
        contentInEnglish: "Content in english",
        userGroup: "User group",
        selectGroup: "Choose group",
        catalog: "Catalog",
        doc: "Document",
        newCatalog: "New catalog",
        newDoc: "New document",
        description: "Description",
        records: "Records",
        recordsLoading: "Loading ...",
        recordsNotFound: "Records not found",
        refinf: "Reference information",
        organization: "Organization",
        params: "Parameters",
        password: "Password",
        person: "Person",
        personal: "Staff",
        protocol: "Protocol",
        requiredField: "Required field",
        revision: "To revision",
        teacher: "Academic personnel",
        student: "Student",
        registration: "Registration",
        total: "Total",
        register: "Check in",
        registered: "Rgistered",
        vote: "Vote",
        revote: "Revote",
        voted: "Voted",
        voting: "Voting",
        search: "Search",
        showingRecordsCount: "Showing {first} to {last} of {totalRecords} entries",
        votedFor: "Voted for: {result}",
        doYouWantDelete: "Are you sure to delete this item?",
        startDate: 'Start date',
        endDate: 'End date',
        send: "Send",
        publish: "Publish",
        reject: "Reject",
        online: "Online",
        offline: "Offline",
        userDetail: "User details",
        role: "Role",
        workPlace: "Work place",
        publishDate:"Date and time of publication:",
        pDate: 'Date of publication',
        deadlineDate:"Deadline for submission of documents",
        organizationNameLabel:"Name of company",
        departmentNameLabel: "The name of the structural unit",
        headLabel: "Head:",
        states: {
            created : "created",
            inapproval : "in approval",
            approved: "approved",
            rejected: "rejected",
            revision: "for revision",
            registered: "Registered",
            notRegistered: "Not registered",
            notVoted: "Not voted",
            voted: "Voted",
        },
        message: {
            title: {
                downloadError: "Download error",
                uploadError: "Upload error",
                saveError: "Save error",
                docCreation: "Adding a new catalog"
            },
            invalidkey: "Wrong password entered",
            notPermissionForApprove: "The selected user does not have the appropriate privileges to reconcile the document",
            fillError: "Not all the data listed. Please fill in all fields!",
            sendToApprovalError: "An error occurred while sending for approval. Check the correctness of the specified data!",
            downloadError: "Error during download",
            uploadError: "Error during upload",
            saveError: "Error during save",
            serverError: "Server error",
            groupsNotSelected: "No groups selected",
            catCreateError: "Error while creating a new catalog",
            codeNotFilled: "Catalog code not specified",
            qazNameNotfilled: "Did not type the name in qazaq",
            rusNameNotfilled: "Did not type the name in russian",
            engNameNotfilled: "Did not type the name in english",
            catSuccesCreated: "New catalog added successfully",
            recordNotFound: "No matching entries found",
            succesSendToApproval: "Succes sent to approval",
            successApproved: "Success approved",
            succesRegistered: "Registered succesfully",
            succesSaved: "Saved successfully",
            selectRole: "Plewse, select a role",
            userSuccessInserted: "The user has been successfully created, download the authorization data to send to the user.",
            selectVariant: "Choose the option you need",
            userIINExists: "User with same iin already exists",
            accessDenied: "You do not have permission to view this document!"
        },
        language: {
            kz: "in kazakh",
            ru: "in russian",
            en: "in english",
            ln1: "in kazakh",
            ln2: "in russian",
            ln3: "in english"
        },
        result: "Result",
        complete: "Complete",
        perform: "To perform",
        done: "Done",
        notDone: "Not done",
        success: "Success",
        downloadSignaturesPdf: "Download signatures",
        signatures: "Signatures"
    },
    bank: {
        title: "Banks",
        title2: "Bank",
        card: "Card",
        swift: "Swift",
        account: "Correspondent account",
        requisite: "Bank details",
        accnumber: "Account number"
    },
    contact: {
        title: "Contact Information",
        address: "Legal address",
        postaddress: "Postal address",
        locality: "Locality",
        phone: "Phone",
        email: "Email",
        bin: "BIN",
        iin: "IIN",
        mailto: "Write a letter",
        fname: "First name",
        lname: "Last name",
        sname: "Second name",
        birthday: "Date of birth",
        position: "Position",
        gender: "gender",
        idcard: {
            requisite: "Document details",
            givenorg: "Issuing authority",
            givendate: "Date of issue",
            expire: "Expiration date",
        }
    },
    contragent: {
        form: "Organization form",
        active: "Active",
        inactive: "Inactive",
        resident: "Resident",
        noneresident: "None resident",
        dossier: "Open dossier",
        organization: "Organizations",
        title: "Contragents",
    },
    doctemplate: {
        title : "Document template creation",
        templates: "Documents templates",
        selected: "Selected template",
        description: "Short description of template",
        newTemplate: "New template",
        updateTemplate: "Update template",
        saveTemplate: "Save template",
        download: "Download template",
        approvingUsers: "Approving person (s)",
        message: {
            notSelected: "No template selected",
            downloadError: "Failed to download template",
            textNotFilled: "Document text is not entered",
            succesUpdated: "Template updated successfully ",
            descriptionNotFilled: "Short description of the template is not entered ",
            succesFilled: "The new template has been added. Enter template text.",
        },
        editor: {
            contractElements: "Contract elements",
            contragent: "Counterparty",
            ourside: "Ourside",
            period: "Period",
            number: "Number",
            text: "Text",
            student: "Student",
            place: "Place of contract",
            date: "Date of contract",
            addElement: "Adding a contract element",
            message: {
            }
        },
    },
    contracts : {
        title: "Contracts",
        autogenerate: "Will be generated automatically when signing or registering",
        contract:"Contract",
        documents: "Contract documents",
        create: "Fast creation of contracts, agreements",
        list: "Register of contracts ",
        listdesc: "List of all contracts, agreements",
        journal: "Журнал",
        orgdesc: "Organizations we interact with",
        person: "Individuals with whom we interact",
        preliminary: "preliminary",
        regnum: "Reg. №",
        reserveNumber: "Number reservation",
        signer: "Signer",
        signing: "Signing",
        fromtemplate: "From template",
        fromdoc: "From a finished document",
        message: {
            created: "Draft contract has been successfully created"
        },
        setnumber: "Set number",

    },
    hdfs: {
        title: "Files",
        fileName: "File name",
        download: "Download",
        remove: "Remove",
        uploadTitle: "Uploading Files",
        chooseFile: "Select a file",
        uploadBtn: "Upload",
        cancelBtn: "Cancel",
        success: "Success",
        toastMsg: "File Uploaded",
        fileRemoved: "File removed",
        dragMsg: "Drag and drop files to here to upload",
        search: "Search",
        noData: "No data",
        loading: "Loading...",
    },
    ncasigner: {
        chooseFile: "Select  the file",
        docIdNotExistMessageForFind: "In order to find the signed document page by file, the correct SIGNERAPP identifier must be present in the file name. Make sure that the correct SIGNERAPP ID is specified in your file name.",
        docIdNotExistMessageForSign: "In order to sign a previously signed document by file, the correct SIGNERAPP identifier must be present in the file name. Make sure that the correct SIGNERAPP ID is specified in your file name. Otherwise, specify the file name without the SIGNERAPP identifier to create a new signature chain.",
        reload: "Reload the page and try again",
        fileWithIdNotFound: "The file with this identifier {dn} was not found in the SIGNERAPP system",
        signedDocPageTitle: "Page of the signed document {name}",
        linkForOthersTitle: "Use the link to the page of the signed document in order to give others the opportunity to check signatures and sign this document:",
        copy: "Copy",
        filHasNoIdTitle: "The SIGNERAPP ID is missing in the name of the file you selected",
        fileHasNoIdContent: "In order to find the signed document page by file, the SIGNERAPP identifier must be present in the file name. Try to find a file of the following format:",
        IncorrectFileTitle: "A file with this name {dn} failed signature verification in the SIGNERAPP system",
        IncorrectFileContent: "This file has been modified or another file has been provided. Please check the file.",
        signed: "he/she signed this document",
        certTemplate: "Certificate Template: ",
        IIN: "IIN",
        certType: "Signature type: ",
        exportCMS: "Export a signature to a file",
        //
        signNotFoundById: "Couldn't find a signature for this ID!",
        //
        successSignTitle: "File {dn} has been successfully signed!",
        successSignContentFirstRow: "Your signature has been verified and has been registered in SIGNAPP",
        successSignContentSecondRow: "We recommend saving a copy of the signed file with the <b>SIGNAPP ID</b>. In the future, this will simplify the search for the signed document page in the SIGNAPP service.",
        saveFileCopyWithId: "Save a copy of the signed file with the ID",
        changeNameManually: "You can also rename the file yourself as follows:",
        goToDoc: "Go to the document",
        successCopy: "Successfully copied to the clipboard!",
        failCopy: "Copying succeeded",
        findDocTitle: "Document Search",
        //
        chosenFile: "Selected file: {fn}",
        //
        find: "Find",

        signatureListTitle: "List of signatures",
        success: {
            header: "Verification of all signatures registered in the system has been successfully completed!",
            subHeader: "This suggests that:",
            firstRow: "all signatures registered in the system are correct;",
            secondRow:"the document that was just submitted for verification was signed, no one made any changes to it.",
            //
            signSuccess: "The document has been successfully signed!"
        },
        signatureError: {
            extractCertificate: "Failed to get user certificate from CMS signature.",
            certificateNotForSigning: "The certificate is not intended for signing",
            extractIin: "Failed to get the IIN from the user certificate",
            mismatchIin: "The IIN received from the certificate is not equal to the user's IIN",
            notIndividual: "The certificate does not belong to an individual",
            notCeo: "The certificate does not belong to the first manager",
            financialSignRightsRequirement: "The certificate does not have the right to sign financial documents",
            signRightsRequirement: "The certificate does not have the right to be signed",
            notHrWorker: "The certificate does not belong to an employee of the HR department",
            notCompanyEmployee: "The certificate does not belong to an employee of the organization.",
            noRightsToSign: "The certificate does not have the right to sign documents (required algorithm: GOST)"
        },
        verifySignatureTitle: "Check the signature under the document",
        verify: "Verify",
        signDocTitle: "Sign the document",
        sign: "To sign",
        chooseDocument: "Select the document!",
        failToBase64: "Failed to convert file to Base64 format",
        signError: "Signature error",
        docNotFoundById: "Could not find a document for this ID!",
        failConnectToNcaLayer: "Failed to connect to NCALayer",
        failToSign: "Failed to sign the document!",
        notEnoughRights: "You don't have enough rights to sign the document!",
        failToSendDoc: "The document ID could not be sent to the server!",

    },
    smartenu: {
        categories: "categories",
        selectCategories: "Select categories",
        newsList: "News list",
        newsTitle: "News",
        eventsTitle: "Events",
        newsNotFound: "News not found",
        eventsNotFound: "Events not found",
        loadingNews: "Loading news. Please wait.",
        loadingEvents: "Loading events. Please wait.",
        newsCategoriesTitle: "News categories",
        createOrEditNewsCategory: "Create/edit news category",
        createOrEditNews: "Create/edit news",
        createOrEditEvents: "Create/edit events",
        chooseCategory: "select a category",
        parent: "parent category",
        categoriesNotFound: "Categories not found",
        loadingCategories: "Loading categories. Please wait.",
        saveCategoryError: "Failed to save category",
        loadAllCategoriesError: "Failed to get categories",
        delNewsCategoryError: "Failed to delete category",
        chooseSuperiorCategory: "Select a higher category",
        saveSuccess: "Saved successfully.",
        chooseImage1: "Upload picture 1",
        chooseImage2: "Upload picture 2",
        chooseMainImage: "Upload main picture",
        chooseAdditionalImage: "Upload additional picture",
        chooseAdditionalFile: "Upload file",
        delNewsError: "Failed to delete news",
        saveNewsError: "Failed to save news",
        loadAllNewsError: "Failed to get news",
        rejectReason: "Rejection reason: {fn}",
        dataAndTime: "Date and time: {fn}",
        eventFormat: "format",
        eventFormatView: "Format: {fn}",
        participantsCategory: "participant category",
        participantsCategoryView: "Participant category: {fn}",
        meetingLink: "link to video conference",
        meetingLinkView: "Video conference link:",
        meetingLocation: "event location",
        meetingLocationView: "Event Location: {fn}",
        loadAllEventsError: "Failed to get events",
        delEventError: "Failed to delete event",
        saveEventError: "Failed to save event",
        selectMainCategory: "Select main category",
        selectMaster: "Select Master's course",
        selectBachelor: "Select bachelor course",
        selectFaculty: "Select faculty",
        selectDepartment: "Select department",
        eventParticipants: "Participants list",
        titleKzInvalid: "The name in Kazakh is not filled",
        titleRuInvalid: "The name in Russian is not filled",
        titleEnInvalid: "The name in English is not filled",
        contentKzInvalid: "Content in Kazakh is not filled",
        contentRuInvalid: "Content in Russian is not filled",
        contentEnInvalid: "Content in English is not filled",
        image1Invalid: "Image not found",
        selectedCatInvalid: "Category not selected",
        isOnlineInvalid: "The format of the event is not selected",
        eventLinkInvalid: "The link to the event is not filled in",
        eventLocationInvalid: "The address of the event is not filled in",
        posterImageKk: "Upload poster in kazakh",
        posterImageRu: "Upload poster in russian",
        posterImageEn: "Upload poster in english",
        posterLink: "Poster link",
        addPoster: "Add poster",
        posterImageKkInvalid: "The poster in Kazakh not selected",
        posterImageRuInvalid: "The poster in Russian not selected",
        posterImageEnInvalid: "The poster in English not selected",
    },
    vaccination: {
        title: "Vaccination",
        list: "Vaccinated List",
        pasport: "Vaccination passport",
        plannedDate: "Planned date",
        date1: "Date (1st component)",
        date2: "Date (2nd component)",
        doctorsNote: "Doctor’s Note",
        vaccine: "Vaccine",
        fillVacTitle: "Enter the name of the vaccine",
        clinic: "Clinic",
        status : {
            firstcomponent: "1st component",
            vaccinated: "vacinated",
            planned: "planned",
            rejected: "medical exemptions",
            noData: "No data",
            minor: "no 18",
         },
         error: {
            list: "vaccine list not loaded"
        }
    },
    dissertation: {
        title: "Dissertation council",
        council: {
            list: "List of councils",
        },
        inactive: "Inactive",
        directionCode: "Code and name of the direction of personnel training",
        defenseConduct: "Conducting a defense",
        doctorals: "Doctoral students",
        doctoralCard: "Doctoral student card",
        disstitle: "Dissertation title",
        abstractFile: "Abstract file",
        dissertationFile: "Dissertation file",
        swList: "List of scientific papers",
        members: "Members of the Dissertation Council",
        specialityCode: "Specialty code and name",
        secretaryname: "Full name of the scientific secretary",
        secretary: "Scientific secretary",
        advisors: "Scientific consultants",
        reviewers: "Official reviewers",
        protocol: "VOTING PROTOCOL OF THE DISSERT COUNCIL",
        permanentMember: "Permanent members",
        tempMember: "Temporary members",
        meetingTime: "Meeting time",
        defenseLang: "Defense language",
        councilDecision: "Council decision",
        setMeetingTime: "Schedule a defense day",
        startRegistration: "Start registration",
        finishRegistration: "Finish registration",
        startVoting: "Start voting",
        finishVoting: "Finish voting",
        validationErrors: {
            selectSpeciality: "Please select a specialty",
            selectDepartment: "Select a faculty",
            selectSecretary: "Please select a scientific secretary",
            selectMember: "Please select a council member",
            selectCreatedDate: "Select a a created date",
            selectDoctorals: "Select doctoral students for which the named person is a reviewer"
        },
        vote: {
            v1: "to award the degree of Doctor of Philosophy (PhD) or Doctor of Science",
            v2: "send the dissertation for revision",
            v3: "submit the thesis for re-defense",
            v4: "refuse to award the degree of Doctor of Philosophy (PhD) or Doctor of Science",
            v5: "TOTAL"
        },
        message: {
            hasSameMember: "The user already has a council membership",
            saveKey: "Voting is anonymous: we do not store your voting result. Please save or download this password to check your vote in the future. The password is known only to you and is not available for recovery.",
            notRegistered: "You cannot vote, because you are not registered",
            enterKey: "Дауысыңызды дешифрлеу үшін дауыс бергенде қолданған кілт сөзді енгізіңіз",
            votingRestarted: "The dissertataion has been submitted for re-voting",
        },
       


    },
    faq: {
        title: "Help desk",
        addFaq: "Ask a question",
        loading: "Wait...",
        question: "Question",
        recipient: "Recipient",
        status: "Status",
        sendDate: "Send date",
        createDate: "Date of creation",
        attachments: "Attachments",
        toAnswer: "To answer",
        forward: "Forward",
        selectRecipient: "Select the recipient",
        uploadImage: "Add a picture",
        uploadFile: "Add a file",
        answer: "Answer",
        noAnswer: "No response received"
    },
    hr: {
        action: {
            interview: 'Invite to interview',
            hire: 'Hire',
            notHire: 'Reject',
            reserve: 'To reserve',
            apply: 'Respond',
            applied: 'Respond sent',
            applied2: 'You have already applied for this position.'
        },
        candidates: 'Candidates',
        candidateResume: 'Candidate resume',
        vacancySource: 'Source of vacancy information',
        motivationLetter: 'Motivation letter',
        sendMessage: 'Send email',
        messageTitle: 'Email header',
        messageBody: 'Content of the email',
        sp: {
            header: 'The selection process for vacant positions takes place in several stages',
            label1: 'consideration of resumes of candidates for filling vacant positions of teaching staff, AUP and HR;',
            label2: 'an interview with an HR specialist and the head of the structural \n ' +
                '                unit who applied for recruitment;',
            label3: 'interview with members of the Competition Commission and summing up the results of the competition.',
            agreement: 'I have read the rules and certify that the information in my personal resume is correct.\n ' +
                '                   I consent to the verification of the provided data.',
            request: 'Submit an application'
        },
        vacancies: "Vacancies",
        responsibilitiesLabel:"Functional responsibilities",
        educationLabel:"Education",
        qualificationLabel: "Qualification in the specialty",
        experienceLabel: "Required professional experience",
        languageLevelLabel: "The level of knowledge of languages",
        certificateRequirementsLabel: "Availability of certificates, diplomas",
        personalQualitiesLabel: "Personal qualities",
        title: {
            general: 'General information',
            degreeAndTitle: 'The presence of a scientific degree and academic title',
            academicDegree: 'Academic degree',
            academicTitle: ' Academic title',
            academicDetail: 'Publications, scientific works, inventions, state awards, encouragement (diplomas, etc.)',
            education: 'Education',
            experience: 'Required professional experience',
            id: 'ID card',
            info: 'Other important information',
            language: 'Languages',
            referee: 'List of people who can refer you',
            refresherCourse: 'Refresher courses, seminars and internships'
        },
        resume: {
            loading: 'Resume is uploading. Please wait...',
            create: 'Create a resume',
            delete: 'Delete resume',
        },
        resumeNorFound: 'Your resume was not found. Would you like to create?',
        ad: {
            defensePlace: 'Defense place',
            defenseDate: 'Defense date',
            diplomaNumber: 'Diploma number',
        },
        edu: {
            institution: 'Institution',
            institutionAddress: 'Institution address',
            receiptDate: 'Receipt date',
            expirationDate: 'Expiration date',
        },
        we: {
            responsibilities: 'Responsibilities',
            untilNow: 'Until now'
        },
        id: {
            startDate: 'Date of issue',
            issuedBy: 'Issued by'
        },
        lang: {
            pl: 'Proficiency level',
            rl: 'Reading level',
            wl: 'Writing level',
            sl: 'Speaking level',
            cs: 'Certificates',
            c: 'Certificate',
            native: 'Free',
            notNative: 'Limited',
        },
        rc: {
            title: 'Title'
        }
    },
    workPlan: {
        plans: "Plans",
        planName: "Plan Name",
        addPlan: "Add plan",
        addEvent: "Add event",
        eventName: "Event name",
        approvalUsers: "Responsible persons",
        quarter: "Quarter",
        executionResult: "Execution result",
        attachments: "Attached files",
        viewPlan: "View plan",
        reports: "Reports",
        events: "Events",
        performEvent: "Perform an event",
        reportName: "Report name",
        createReport: "Create report",
        toCorrect: "Send for correction",
        editEvent: "Edit Event",
        errors: {
            eventNameError: "Enter the name of the event",
            approvalUserError: "Select the responsible persons",
            quarterError: "Select a quarter",
        },
        message: {
            eventCreated: "Event created successfully",
            eventChanged: "Event has been successfully edited",
            reportSentToApprove: "The report was successfully sent for approval",
            planSentToApprove: "Plan sent for revision",
            planCreated: "Plan successfully created",
        },
        reportTypes: {
            year: "Annual",
            quarter: "Quarterly"
        }
    }
}
